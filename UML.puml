@startuml
class boundaries.RectangleBoundary {
- double x1
+ <<Create>> RectangleBoundary(double,double,double,double)
+ boolean isWithinBoundary(double,double)
+ void drawBoundary(GraphicsContext)
}


class Items.Poisons.Mega_Health_Poison {
+ <<Create>> Mega_Health_Poison()
}

class entities.Player.Rocket {
- Image rocket
- Image purple_rocket
- Image red_rocket
+ <<Create>> Rocket(double,double,String)
+ void setRocket(String)
}


class gui.battle.InventoryPane {
# {static} InventoryPane instance
+ <<Create>> InventoryPane()
+ void init()
+ void handleItem(Base_Item)
+ void handleHover(Base_Item)
+ {static} InventoryPane getInstance()
+ void update()
+ void resetItem()
}


class gui.MapTransitionPane {
- ArrayList<Text> dots
- int dotSize
- Text loading
- MediaPlayer mediaPlayer
+ <<Create>> MapTransitionPane()
+ void initializeDot()
+ void updateDots()
+ void setDotAnimation()
+ void playMusic()
}


enum Items.Base.Type {
+  HEALTH
+  MANA
}

class entities.Player.My_Monster {
- ArrayList<Base_Monster> monsters
- int MAX_MONSTER
+ <<Create>> My_Monster()
+ void addMonster(Base_Monster)
+ ArrayList<Base_Monster> getMonsters()
}


class entities.Monster.Fai {
- Image img
+ <<Create>> Fai(int,int,boolean)
+ boolean attack(Base_Monster)
+ String getAttack()
+ boolean unique_ability(Base_Monster)
+ String getUnique()
}


class gui.battle.BattlePane {
# {static} BattlePane instance
# Thread battleLoop
# boolean gameEnd
- AtomicBoolean isBossTurnStarted
# Boolean turn
# ActionPane actionPane
# BattleFieldPane battleFieldPane
# InventoryPane inventoryPane
# MonsterPane monsterPane
- int cellWidth
- int cellHeight
- MediaPlayer mediaPlayer
+ <<Create>> BattlePane()
+ void init()
+ void startBattle()
+ void endBattle(Boolean)
+ void draw()
+ void update()
+ void checkGameState()
+ void startBossTurn()
+ void setPlayerTurn(Boolean)
+ void playMusic()
+ {static} BattlePane getInstance()
+ {static} void setInstance(BattlePane)
+ Thread getBattleLoop()
+ void setBattleLoop(Thread)
+ boolean isGameEnd()
+ void setGameEnd(boolean)
+ Boolean getTurn()
+ void setTurn(Boolean)
+ ActionPane getActionPane()
+ void setActionPane(ActionPane)
+ BattleFieldPane getBattleFieldPane()
+ void setBattleFieldPane(BattleFieldPane)
+ InventoryPane getInventoryPane()
+ void setInventoryPane(InventoryPane)
+ MonsterPane getMonsterPane()
+ void setMonsterPane(MonsterPane)
+ int getCellWidth()
+ void setCellWidth(int)
+ int getCellHeight()
+ void setCellHeight(int)
}


class gui.RocketPane {
- int BTN_WIDTH
- int BTN_HEIGHT
- Button confirmBtn
- Button cancelBtn
- Text Title
- Image BgImage
+ <<Create>> RocketPane()
+ void init()
+ void createTitle()
+ void initializeButtons()
+ void confirmLaunch()
+ void cancelLaunch()
}


interface Items.Base.Splashable {
~ void use(Base_Monster)
}

class map.MapPlanet3 {
- Image component
+ <<Create>> MapPlanet3()
+ boolean checkBoundary(double,double)
+ void drawBoundary(GraphicsContext)
+ void draw(GraphicsContext)
+ Boolean isCleared()
+ void setIsCleared(Boolean)
}


class main.Main {
- Stage primaryStage
- {static} Main instance
+ void start(Stage)
+ void changeScene(Pane,Boolean)
+ {static} void changeSceneStatic(Pane,Boolean)
+ {static} void fadeAudio(MediaPlayer,int)
+ {static} void main(String[])
+ Main getInstance()
}


class Items.Potions.Mega_Mana_Potion {
+ <<Create>> Mega_Mana_Potion()
}

class entities.Player.Player {
- {static} String name
- {static} My_Monster my_monster
- {static} Inventory inventory
- {static} int ACTION_POINT
- {static} int Used_Point
- {static} Player player
- {static} int width
- {static} int height
- {static} Image imgRight
- {static} Image imgLeft
- {static} double newX
- {static} Rectangle playerRect
- {static} Base_Monster activeMonster
+ <<Create>> Player(String,double,double,double,double)
+ void update()
+ void movePlayer()
+ void draw(GraphicsContext)
+ void drawBoundary(GraphicsContext)
+ void createEntitiesBound()
+ {static} String getName()
+ {static} My_Monster getMy_monster()
+ {static} Inventory getInventory()
+ {static} int getACTION_POINT()
+ {static} int getUsed_Point()
+ {static} void setUsed_Point(int)
+ {static} Player getPlayer()
+ {static} Base_Monster getActiveMonster()
+ {static} void setActiveMonster(Base_Monster)
}


interface entities.Monster.Abilities.Unique_Ability {
~ boolean unique_ability(Base_Monster)
~ String getUnique()
}

abstract class Items.Base.Base_Potion {
+ <<Create>> Base_Potion(Type,int)
+ void use(Base_Monster)
}

abstract class map.GameMap {
# Boundary boundary
# Sprite boss
# Rocket rocket
# double initialX
# {static} Boolean earthIsCleared
+ {abstract}boolean checkBoundary(double,double)
+ Boundary getBoundary()
+ {abstract}void drawBoundary(GraphicsContext)
+ void draw(GraphicsContext)
+ void setBoss(Sprite)
+ Sprite getBoss()
+ void resetBoss()
+ Rocket getRocket()
+ void setPlayerPosition(double,double)
+ void resetPlayerPosition()
+ void setInitialPosition(double,double)
+ {abstract}void setIsCleared(Boolean)
+ {abstract}Boolean isCleared()
+ {static} Boolean gameCleared()
}


abstract class Items.Base.Base_Poison {
+ <<Create>> Base_Poison(Type,int)
+ void use(Base_Monster)
}

class boundaries.LinearBoundary {
- double m
- double c
+ <<Create>> LinearBoundary(double,double)
+ boolean isWithinBoundary(double,double)
+ void drawBoundary(GraphicsContext)
}


class gui.battle.MonsterDetail {
# Text monsterName
# Text monsterDamage
# Text monsterDef
# Text monsterHp
# Text monsterMana
+ <<Create>> MonsterDetail(String,String,String,String,String)
+ void setMonsterName(String)
+ void setMonsterDamage(String)
+ void setMonsterDef(String)
+ void setMonsterHp(String)
+ void setMonsterMana(String)
}


class Items.Potions.Mana_Potion {
+ <<Create>> Mana_Potion()
}

abstract class boundaries.Boundary {
+ {abstract}boolean isWithinBoundary(double,double)
+ {abstract}void drawBoundary(GraphicsContext)
}

class map.MapPlanet2 {
- Image tree
- Image tree_Rock
- Boundary boundary2
- {static} Boolean isCleared
+ <<Create>> MapPlanet2()
+ boolean checkBoundary(double,double)
+ void drawBoundary(GraphicsContext)
+ void draw(GraphicsContext)
+ Boolean isCleared()
+ void setIsCleared(Boolean)
}


class Items.Potions.Mega_Health_Potion {
+ <<Create>> Mega_Health_Potion()
}

abstract class Items.Base.Base_Item {
- Type type
- boolean isUsed
- int power
# Image image
# Image usedImage
+ <<Create>> Base_Item(int)
+ String toString()
+ boolean isUsed()
+ void setUsed(boolean)
+ int getPower()
+ void setPower(int)
+ Image getImage()
+ Image getUsedImage()
+ Type getType()
+ void setType(Type)
}


class entities.Player.Inventory {
- ArrayList<Base_Item> Items
- int MAX_ITEMS
+ <<Create>> Inventory()
+ void addItem(Base_Item)
+ ArrayList<Base_Item> getItems()
}


class inputs.KeyboardInputs {
+ boolean up
+ void handle(KeyEvent)
}


class boundaries.ParabolicBoundary {
- double h
+ <<Create>> ParabolicBoundary(double,double,double)
+ boolean isWithinBoundary(double,double)
+ void drawBoundary(GraphicsContext)
}


class gui.battle.ActionPane {
# {static} ActionPane instance
# Text actionText
# Text itemDetail
- Text actionPoint
# ImageView attackButton
# ImageView GuardButton
# ImageView UniqueButton
# MonsterDetail monsterDetail
- Base_Monster boss
- int cellHeight
- int cellWidth
+ <<Create>> ActionPane()
+ void init()
+ void createText()
+ void createButton()
+ void createActionPoint()
+ void handleHover(Base_Monster,String)
+ void handleAttack()
+ void handleGuard()
+ void handleUnique()
+ void update()
+ void setItemDetail(String)
+ void setMonsterDetail(MonsterDetail)
+ {static} ActionPane getInstance()
}


class map.MapBlackHole {
+ <<Create>> MapBlackHole()
+ boolean checkBoundary(double,double)
+ void drawBoundary(GraphicsContext)
+ Boolean isCleared()
+ void setIsCleared(Boolean)
}

class gui.MapPane {
- {static} MapPane instance
- Thread gameLoop
- boolean running
+ {static} KeyboardInputs keyHandler
- Boolean Battle
- Canvas canvas
- GraphicsContext gc
- Player player
- {static} GameMap gameMap
- MediaPlayer mediaPlayer
+ <<Create>> MapPane()
- void update()
- void draw()
+ void handleCollideWithRocket()
+ void handleCollideWithBoss()
- void init()
+ {static} void generateGameMap()
+ void createGameLoop()
+ void playMusic()
+ void stopMusic()
+ Boolean getBattle()
+ void setBattle(Boolean)
+ Canvas getCanvas()
+ void setCanvas(Canvas)
+ GraphicsContext getGc()
+ void setGc(GraphicsContext)
+ void setPlayer(Player)
+ {static} GameMap getGameMap()
+ {static} MapPane getInstance()
+ void setGameLoopState(boolean)
}


interface Items.Base.Consumeable {
~ void use(Base_Monster)
}

class entities.Sprite {
- double x
- double y
- double width
- double height
- double speed
- Image image
+ <<Create>> Sprite(double,double,double,double,double,Image)
+ void move(double,double)
+ double getSpeed()
+ double getX()
+ void setX(double)
+ double getY()
+ void setY(double)
+ double getWidth()
+ void setWidth(double)
+ double getHeight()
+ void setHeight(double)
+ void setSpeed(double)
+ void setImage(Image)
+ Image getImage()
}


class Items.Potions.Health_Potion {
+ <<Create>> Health_Potion()
}

class entities.Monster.Faith {
- Image img
+ <<Create>> Faith(int,int)
+ boolean attack(Base_Monster)
+ String getAttack()
+ boolean guard(Base_Monster)
+ boolean unique_ability(Base_Monster)
+ String getUnique()
}


class map.MapEarth {
+ <<Create>> MapEarth()
+ boolean checkBoundary(double,double)
+ void drawBoundary(GraphicsContext)
+ Boolean isCleared()
+ void setIsCleared(Boolean)
}

abstract class entities.Monster.Base_Monster {
- String name
- int maxHp
- int hp
- int maxMana
- int mana
- int baseDmg
- int dmg
- int baseDef
- int def
- int manaReg
- boolean owned
- Image dead_img
- Image idle_ally_img
- Image idle_battle_img
- Image special_ally_img
+ <<Create>> Base_Monster(String,int,int,int,int,int,boolean,double,double,double,double,double,Image)
+ boolean isDead()
+ {static} String toString(String,String,int,String)
+ {static} String Choose_Boss_Ability(Base_Monster)
+ String getName()
+ int getMaxHp()
+ void setMaxHp(int)
+ int getHp()
+ void setHp(int)
+ int getMaxMana()
+ void setMaxMana(int)
+ int getMana()
+ void setMana(int)
+ int getDmg()
+ void setDmg(int)
+ int getDef()
+ void setDef(int)
+ int getBaseDmg()
+ void setBaseDmg(int)
+ int getBaseDef()
+ void setBaseDef(int)
+ int getManaReg()
+ void setManaReg(int)
+ boolean isOwned()
+ Image getDead_img()
+ void setDead_img(String)
+ Image getIdle_ally_img()
+ void setIdle_ally_img(String)
+ Image getIdle_battle_img()
+ void setIdle_battle_img(String)
+ Image getSpecial_ally_img()
+ void setSpecial_ally_img(String)
+ void startTurn()
}


interface entities.Monster.Abilities.Guardable {
~ boolean guard(Base_Monster)
}

class boundaries.InverseParabolicBoundary {
- double h
+ <<Create>> InverseParabolicBoundary(double,double,double)
+ boolean isWithinBoundary(double,double)
+ void drawBoundary(GraphicsContext)
}


class boundaries.EllipseBoundary {
- double centerX
+ <<Create>> EllipseBoundary(double,double,double,double)
+ boolean isWithinBoundary(double,double)
+ void drawBoundary(GraphicsContext)
}


class entities.Monster.TU_Force {
- Image img
+ <<Create>> TU_Force(int,int,boolean)
+ boolean attack(Base_Monster)
+ String getAttack()
+ boolean unique_ability(Base_Monster)
+ String getUnique()
}


class gui.CongratulationPane {
+ <<Create>> CongratulationPane()
}

class entities.Monster.Chatrin {
- Image img
+ <<Create>> Chatrin(int,int)
+ boolean attack(Base_Monster)
+ String getAttack()
+ boolean guard(Base_Monster)
+ boolean unique_ability(Base_Monster)
+ String getUnique()
}


interface entities.Monster.Abilities.Attackable {
~ boolean attack(Base_Monster)
~ String getAttack()
}

class gui.battle.BattleFieldPane {
# {static} BattleFieldPane instance
# Base_Monster myMonster
# Base_Monster enemyMonster
# MonsterDetail myMonsterDetail
# MonsterDetail enemyMonsterDetail
- Canvas battleCanvas
- GraphicsContext gc
- Text battleLog
- Image activeMonsterImage
- Image enemyMonsterImage
- double activeMonsterPosX
- double activeMonsterPosY
- double bossPosX
- double bossPosY
- long lastLogTime
+ <<Create>> BattleFieldPane()
+ void init()
+ void createMonsterDetail()
+ void update()
+ void draw()
+ void handleBattle(String)
+ void setMyMonster(Base_Monster)
+ void setMyMonsterDetail(MonsterDetail)
+ Image getActiveMonsterImage()
+ void setActiveMonsterImage(Image)
+ Image getEnemyMonsterImage()
+ void setEnemyMonsterImage(Image)
+ {static} BattleFieldPane getInstance()
+ {static} void setInstance(BattleFieldPane)
+ Base_Monster getMyMonster()
+ Base_Monster getEnemyMonster()
+ void setEnemyMonster(Base_Monster)
+ MonsterDetail getMyMonsterDetail()
+ MonsterDetail getEnemyMonsterDetail()
+ void setEnemyMonsterDetail(MonsterDetail)
+ Canvas getBattleCanvas()
+ void setBattleCanvas(Canvas)
+ GraphicsContext getGc()
+ void setGc(GraphicsContext)
+ Text getBattleLog()
+ void setBattleLog(Text)
}


class gui.StartPane {
- int BTN_WIDTH
- int BTN_HEIGHT
- MediaPlayer mediaPlayer
+ <<Create>> StartPane()
+ void initializeTitle()
+ void initilizeStartBtn()
+ void initilizeExitBtn()
+ void playMusic()
}


class map.MapPlanet1 {
- Boundary boundary2
+ <<Create>> MapPlanet1()
+ boolean checkBoundary(double,double)
+ void drawBoundary(GraphicsContext)
+ Boolean isCleared()
+ void setIsCleared(Boolean)
}


class gui.MapSelectPane {
+ {static} String mapName
+ <<Create>> MapSelectPane()
+ void initializePlanet()
- ImageView createPlanetView(String,int,int,VPos)
- ImageView createPlanetView(String,int,int,VPos,HPos)
- void addPlanetClickHandler(ImageView,String)
}


class entities.Monster.Fei {
- Image img
+ <<Create>> Fei(int,int,boolean)
+ boolean unique_ability(Base_Monster)
+ String getUnique()
}


class gui.battle.MonsterPane {
# {static} MonsterPane instance
+ <<Create>> MonsterPane()
+ void init()
+ void update()
+ void handleHover(Base_Monster)
+ void handleOnClick(Base_Monster)
+ {static} MonsterPane getInstance()
}




boundaries.Boundary <|-- boundaries.RectangleBoundary
Items.Base.Base_Poison <|-- Items.Poisons.Mega_Health_Poison
entities.Sprite <|-- entities.Player.Rocket
gui.battle.GridPane <|-- gui.battle.InventoryPane
gui.Pane <|-- gui.MapTransitionPane
entities.Monster.Abilities.Attackable <|.. entities.Monster.Fai
entities.Monster.Abilities.Unique_Ability <|.. entities.Monster.Fai
entities.Monster.Base_Monster <|-- entities.Monster.Fai
gui.battle.GridPane <|-- gui.battle.BattlePane
gui.GridPane <|-- gui.RocketPane
map.GameMap <|-- map.MapPlanet3
javafx.application.Application <|-- main.Main
Items.Base.Base_Potion <|-- Items.Potions.Mega_Mana_Potion
entities.Sprite <|-- entities.Player.Player
Items.Base.Consumeable <|.. Items.Base.Base_Potion
Items.Base.Base_Item <|-- Items.Base.Base_Potion
Items.Base.Splashable <|.. Items.Base.Base_Poison
Items.Base.Base_Item <|-- Items.Base.Base_Poison
boundaries.Boundary <|-- boundaries.LinearBoundary
javafx.scene.layout.VBox <|-- gui.battle.MonsterDetail
Items.Base.Base_Potion <|-- Items.Potions.Mana_Potion
map.GameMap <|-- map.MapPlanet2
Items.Base.Base_Potion <|-- Items.Potions.Mega_Health_Potion
javafx.event.EventHandler <|.. inputs.KeyboardInputs
boundaries.Boundary <|-- boundaries.ParabolicBoundary
gui.battle.GridPane <|-- gui.battle.ActionPane
map.GameMap <|-- map.MapBlackHole
gui.StackPane <|-- gui.MapPane
Items.Base.Base_Potion <|-- Items.Potions.Health_Potion
entities.Monster.Abilities.Attackable <|.. entities.Monster.Faith
entities.Monster.Abilities.Guardable <|.. entities.Monster.Faith
entities.Monster.Abilities.Unique_Ability <|.. entities.Monster.Faith
entities.Monster.Base_Monster <|-- entities.Monster.Faith
map.GameMap <|-- map.MapEarth
entities.Sprite <|-- entities.Monster.Base_Monster
boundaries.Boundary <|-- boundaries.InverseParabolicBoundary
boundaries.Boundary <|-- boundaries.EllipseBoundary
entities.Monster.Abilities.Attackable <|.. entities.Monster.TU_Force
entities.Monster.Abilities.Unique_Ability <|.. entities.Monster.TU_Force
entities.Monster.Base_Monster <|-- entities.Monster.TU_Force
gui.Pane <|-- gui.CongratulationPane
entities.Monster.Abilities.Attackable <|.. entities.Monster.Chatrin
entities.Monster.Abilities.Guardable <|.. entities.Monster.Chatrin
entities.Monster.Abilities.Unique_Ability <|.. entities.Monster.Chatrin
entities.Monster.Base_Monster <|-- entities.Monster.Chatrin
gui.battle.Pane <|-- gui.battle.BattleFieldPane
gui.BorderPane <|-- gui.StartPane
map.GameMap <|-- map.MapPlanet1
gui.GridPane <|-- gui.MapSelectPane
entities.Monster.Abilities.Unique_Ability <|.. entities.Monster.Fei
entities.Monster.Base_Monster <|-- entities.Monster.Fei
gui.battle.GridPane <|-- gui.battle.MonsterPane
@enduml